I"Ç<h1 id="initial-project-setup">Initial Project Setup</h1>
<p>I was originally going to use <strong>Sharpmake</strong> as the build system for the project, it is very powerful, fast, and easy for anyone who is familiar with programming since the configuration is done in C#. However, Iâ€™m currently running into issues with the most recent distribution and I didnâ€™t want to spend any more time debugging instead of working on the project. If the scope of the build system starts getting out of hand Iâ€™ll switch over and work through the issues, but for the sake of getting up and running ASAP weâ€™re going to use <strong>premake5</strong> for the time being, a more than capable build configuration manager, and my preferred system outside <strong>Sharpmake</strong>.</p>

<h2 id="downloading-premake-binaries-and-license">Downloading Premake Binaries and License</h2>
<p>Follow this link: https://github.com/premake/premake-core/releases</p>

<p>Click the version you want to download, Iâ€™m using <strong>Premake 5.0-beta1</strong>
<img src="/assets/img/premake_setup/exe_download.png" alt="Premake Download" /></p>

<p>This will download a zip file containing the executable we need. 
<img src="/assets/img/premake_setup/exe_archive.png" alt="Exe Unzip" /></p>

<p><strong>Make sure to grab the LICENSE as well to give proper credit</strong></p>

<p>License currently at: https://github.com/premake/premake-core/blob/master/LICENSE.txt</p>

<p>Press the Raw button and save the file as LICENSE.txt
<img src="/assets/img/premake_setup/license.png" alt="LICENSE Download" /></p>

<h2 id="setting-up-the-project">Setting up the project</h2>
<p>I have a specific way that I like to set up project, so I will explain using the file structure that I plan on using for this project, if you structure your projects differently no worries just slot things in where you need them and adjust file paths accordingly.</p>

<p>Basic structure for the project:</p>

<p><img src="/assets/img/premake_setup/proj_tree.png" alt="Project Structure" /></p>

<p>Iâ€™ve moved the un-zipped premake5.exe under a directory called Vendor/bin/premake/ along with the LICENSE.txt</p>

<p>Iâ€™ve also create a new file called <strong>premake5.lua</strong> <em>Premake looks for this file by name specifically so make sure itâ€™s correct.</em></p>

<p><strong>premake5.lua</strong> is where weâ€™ll hold all our project configuration for now (this might get broken up into multiple files eventually).</p>

<h2 id="making-the-engine-project">Making the Engine project</h2>

<p>You can look through the wiki on the github page or a slightly nicer version here: https://premake.github.io/docs/</p>

<p>I wonâ€™t be going into extreme depth as to how everything works, so feel free to pursue the docs and search for concepts that I didnâ€™t cover. I would specifically look at (https://premake.github.io/docs/Tokens/#value-tokens) to see some predefined values.</p>

<h3 id="some-initial-tags-of-note">Some initial tags of note</h3>

<ul>
  <li><strong>workspace</strong> - Name of the solution that is generated</li>
  <li><strong>project</strong> - Name of a particular project (everything written under this will be a part of that project until another is specified or another variable is declared)</li>
  <li><strong>location</strong> - Name of folder to emit the main artifact to (.vcxproj, â€¦) <em>relative to the script file</em></li>
  <li><strong>files</strong> - Relative paths to the files that should be included in the project</li>
  <li><strong>targetdir</strong> - Output path of build artifacts (.lib, .pdb, â€¦)</li>
  <li><strong>objdir</strong> - Output path of intermediate build artifacts (.obj, .log, â€¦)</li>
</ul>

<p>Here is some initial configuration that will create a solution called Engine with a project called Engine within it:</p>

<figure class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="n">workspace</span> <span class="s2">"Engine"</span>
	<span class="n">architecture</span> <span class="s2">"x64"</span>

	<span class="n">configurations</span>
	<span class="p">{</span>
		<span class="s2">"Debug"</span><span class="p">,</span>
		<span class="s2">"Release"</span><span class="p">,</span>
		<span class="s2">"Ship"</span>
	<span class="p">}</span>

<span class="n">outputdir</span> <span class="o">=</span> <span class="s2">"%{cfg.buildcfg}-%{cfg.system}-%{cfg.architecture}"</span>

<span class="n">project</span> <span class="s2">"Engine"</span>
	<span class="n">location</span> <span class="s2">"Engine"</span>
	<span class="n">kind</span> <span class="s2">"StaticLib"</span>
	<span class="n">language</span> <span class="s2">"C++"</span>
	<span class="n">cppdialect</span> <span class="s2">"C++17"</span>
	<span class="n">staticruntime</span> <span class="s2">"on"</span>

	<span class="n">targetdir</span> <span class="p">(</span><span class="s2">"bin/"</span> <span class="o">..</span> <span class="n">outputdir</span> <span class="o">..</span> <span class="s2">"/%{prj.name}"</span><span class="p">)</span>	
	<span class="n">objdir</span> <span class="p">(</span><span class="s2">"bin-obj/"</span> <span class="o">..</span> <span class="n">outputdir</span> <span class="o">..</span> <span class="s2">"/%{prj.name}"</span><span class="p">)</span>

	<span class="n">files</span>
	<span class="p">{</span>
		<span class="s2">"%{prj.name}/src/**.h"</span><span class="p">,</span>
		<span class="s2">"%{prj.name}/src/**.cpp"</span>
	<span class="p">}</span>	</code></pre></figure>

<h2 id="making-the-testbed-project">Making the Testbed project</h2>

<h2 id="making-a-bat-file-to-run-the-steps-for-us">Making a bat file to run the steps for us</h2>

<p><em>insert screenshot of vs2019 solution</em></p>

<p><em>insert next step teaser: engine to testbed interaction and logging</em></p>
:ET