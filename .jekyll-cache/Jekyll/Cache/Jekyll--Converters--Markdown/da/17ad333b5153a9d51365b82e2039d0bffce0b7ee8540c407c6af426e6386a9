I"><h2 id="problem-where-does-the-boundary-between-game-and-engine-begin">Problem: Where does the boundary between game and engine begin?</h2>

<p>This is a fairly individual question to ask, and the answers can very quite a bit. In most of my previous projects I never bothered to make any real distinction, the purposes of those engines were to make one specific game so a tight coupling between the two wasn’t a problem. However, for this project, while I do have a first game somewhat in mind, I plan on making many projects using this code base, so I want to go with an architecture that makes it reusable without being too tied up in endless abstraction.</p>

<p>Another question to ask is, how much control/responsibility do you want to put on the user (game) side? Should the engine simply be a set of utilities and libraries, or should it manage some internal state and handle some heavy lifting?</p>

<p>I’ve answered these questions for myself, and I’ll be discussing why I chose the separation that I did and how I got to that point.</p>

<h2 id="engineh">Engine.h</h2>

:ET