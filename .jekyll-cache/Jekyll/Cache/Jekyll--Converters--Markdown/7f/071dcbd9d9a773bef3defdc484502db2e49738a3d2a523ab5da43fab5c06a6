I"_<p><em>Disclaimer: I’m intentionally trying to go with the first reasonable solution I think of to solve the current problem (with some thinking ahead and lessons learned from the past), so there’s a chance I’ll think of a better solution in the future and the code will be different.</em></p>

<h2 id="key-thoughts">Key Thoughts</h2>

<h2 id="problem-where-does-the-boundary-between-game-and-engine-begin">Problem: Where does the boundary between game and engine begin?</h2>

<p>This is a fairly individual question to ask, and the answers can vary quite a bit. In most of my previous projects I never bothered to make any real distinction, the purposes of those engines were to make one specific game so a tight coupling between the two wasn’t a problem. However, for this project, while I do have a first game somewhat in mind, I plan on making many projects using this code base, so I want to go with an architecture that makes it reusable without being too tied up in endless abstraction.</p>

<p>Another question to ask is, how much control/responsibility do you want to put on the user (game) side? Should the engine simply be a set of utilities and libraries, or should it manage some internal state and handle some heavy lifting?</p>

<p>I’ve answered these questions for myself, and I’ll be discussing some potential architectures and why I chose what I chose.</p>

<h2 id="engineh">Engine.h</h2>

<p>As I’ve moved from project to project I find myself re-writing many of the same features. I do my best to take existing code when I can and slot it in, but it’s not always that easy. The first architecture I considered is a series of lightweight header only libraries, that either got compiled into a single include or linked via a single header that includes the rest of the libraries.</p>

<h3 id="pros">Pros</h3>

<ul>
  <li>Simplicity! - The ability to drag and drop a single file into any project and instantly have access to useful helper functions and utilities is not nothing. If all the logic is contained in a single file you don’t have to worry about additional dependencies, everything “should” work right out of the box.</li>
  <li>Reusability - The types of utilities I think of when thinking about this setup include things like <em>math.h</em> that would include tons of functions for 2D/3D vector math, matrix manipulation, quaternions, and so on. This file could be dropped into any project that required math operations even projects outside the games sphere.</li>
</ul>

<h3 id="cons">Cons</h3>

<ul>
  <li>The types of utilities you can provide with this method are realistically constrained to systems that don’t manage internal state. If you include a header file with the intention of calling a few helpful methods to make your life easier, in my mind, you don’t really expect to have to set up and tear down a bunch of additional structures. So every call to a function should be constrained to that function and any additional internal logic.</li>
</ul>

<h2 id="enginelib--enginedll">Engine.lib / Engine.dll</h2>

<p>Range of possible implementations here, going from a similar structure as above with minimal helper libraries that are just linked in, up to something that holds all the state for the core systems of the engine. For the latter, the game only registers a few callbacks to the engine to interface, and all the state, initialization, and teardown is dealt with in the lib / dll.</p>

<h3 id="pros-1">Pros</h3>

<ul>
  <li>Cleaner lines between game and engine. By splitting the code between two projects, if you maintain discipline, it’s easier to keep game code on the game side, and engine code on the engine side, without crossing boundaries for convenience.</li>
  <li>Reusable code base. If you succeed at the first point, the engine lib will remain game agnostic and therefor can be linked into any potential game and have an immediate jumping off point for developing it.</li>
</ul>

<h3 id="cons-1">Cons</h3>

<ul>
  <li>Potentially stuck with a fixed interface. If you tend more towards the involved engine.lib, where state, startup, and shutdown types of things are handled engine side, you may be stuck with the interface that you provide in subsequent games, unless you’re willing to rewrite a decent chunk of core code. This isn’t as much of a concern for me because I expect to be the only real customer of my engine, so I’ll make it how I like, and if I really needed to change core code, I was the one who wrote it, so I could change it if I liked.</li>
</ul>

<h2 id="gameexe">Game.exe</h2>

<p>The final setup I considered is how I’ve done basically every other project I’ve worked on, where the engine and <strong>a</strong> specific game are a single project, and the systems tend towards more highly coupled.</p>

<h3 id="pros-2">Pros</h3>

<ul>
  <li>No wasted time with unnecessary abstractions. If you know the specific problem you’re trying to solve (ie. already have a game in mind) then you don’t need to concern yourself with making abstractions to allow for a variety of games, and you don’t need to build systems that your game doesn’t need.</li>
</ul>

<h3 id="cons-2">Cons</h3>

<ul>
  <li>As I mentioned above, with no clear boundary between engine and game, it’s easy to tightly couple your systems, potentially making them less flexible to changes in the design of your game, and certainly make it harder to strip out functionality if you wanted to reuse anything. With all the code in one project, it’s tempting to solve problems in a brittle way. For instance, if you have an issue with a system not having access to some piece of state that it needs, you could potentially just bake in a pointer to that state so it always has access. However, you’re now burdened with the responsibility to manage that pointer or hard reference, and make sure it’s up to date.</li>
</ul>

<h2 id="the-path-i-chose">The Path I Chose</h2>

<p>For this project I fell somewhere towards the upper end of the Engine.lib variation. I want basically all the platform specific stuff to be dealt with by the engine as well as a good deal of setting up the environment and managing resources. I’m still debating over where the exact line between the two is drawn, if I want to just provide a couple callbacks for init, update, render, and a few others, or if I want the game to have full control over the loop and make it necessary for the game to update the engine systems when it feels like it. Currently, I lean towards the former given that the engine is primarily a tool for me to build with, so if I need finer control I can cross that bridge when I get there. However, there may be benefit in giving back a bit more control to the game if I was to ever publish the full project for anyone to use, or some hybrid opt-in approach. Who knows? We’ll get there when we get there, and it shouldn’t be too big a lift to move the main loop to the game side, so I’m not worried at the moment.</p>

<h2 id="basic-application-interface-setup">Basic Application Interface Setup</h2>

<p><em>code snippet of game calling engine setup here</em></p>

<h2 id="whats-next">What’s next?</h2>

<p><em>Teaser of our first system: Logging!</em></p>
:ET